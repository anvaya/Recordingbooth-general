#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5456
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



public partial class RecordingsData : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertRECORDING(RECORDING instance);
  partial void UpdateRECORDING(RECORDING instance);
  partial void DeleteRECORDING(RECORDING instance);
  partial void InsertUSERS(USERS instance);
  partial void UpdateUSERS(USERS instance);
  partial void DeleteUSERS(USERS instance);
  #endregion
	
	public RecordingsData(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public RecordingsData(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public RecordingsData(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public RecordingsData(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<RECORDING> RECORDING
	{
		get
		{
			return this.GetTable<RECORDING>();
		}
	}
	
	public System.Data.Linq.Table<USERS> USERS
	{
		get
		{
			return this.GetTable<USERS>();
		}
	}
}

[Table()]
public partial class RECORDING : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _RECORDING_ID;
	
	private int _USER_ID;
	
	private System.DateTime _TIMESTAMP;
	
	private string _FILENAME;
	
	private EntityRef<USERS> _USERS;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRECORDING_IDChanging(int value);
    partial void OnRECORDING_IDChanged();
    partial void OnUSER_IDChanging(int value);
    partial void OnUSER_IDChanged();
    partial void OnTIMESTAMPChanging(System.DateTime value);
    partial void OnTIMESTAMPChanged();
    partial void OnFILENAMEChanging(string value);
    partial void OnFILENAMEChanged();
    #endregion
	
	public RECORDING()
	{
		this._USERS = default(EntityRef<USERS>);
		OnCreated();
	}
	
	[Column(Storage="_RECORDING_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int RECORDING_ID
	{
		get
		{
			return this._RECORDING_ID;
		}
		set
		{
			if ((this._RECORDING_ID != value))
			{
				this.OnRECORDING_IDChanging(value);
				this.SendPropertyChanging();
				this._RECORDING_ID = value;
				this.SendPropertyChanged("RECORDING_ID");
				this.OnRECORDING_IDChanged();
			}
		}
	}
	
	[Column(Storage="_USER_ID", DbType="Int NOT NULL")]
	public int USER_ID
	{
		get
		{
			return this._USER_ID;
		}
		set
		{
			if ((this._USER_ID != value))
			{
				if (this._USERS.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUSER_IDChanging(value);
				this.SendPropertyChanging();
				this._USER_ID = value;
				this.SendPropertyChanged("USER_ID");
				this.OnUSER_IDChanged();
			}
		}
	}
	
	[Column(Storage="_TIMESTAMP", DbType="DateTime NOT NULL")]
	public System.DateTime TIMESTAMP
	{
		get
		{
			return this._TIMESTAMP;
		}
		set
		{
			if ((this._TIMESTAMP != value))
			{
				this.OnTIMESTAMPChanging(value);
				this.SendPropertyChanging();
				this._TIMESTAMP = value;
				this.SendPropertyChanged("TIMESTAMP");
				this.OnTIMESTAMPChanged();
			}
		}
	}
	
	[Column(Storage="_FILENAME", DbType="NVarChar(32)")]
	public string FILENAME
	{
		get
		{
			return this._FILENAME;
		}
		set
		{
			if ((this._FILENAME != value))
			{
				this.OnFILENAMEChanging(value);
				this.SendPropertyChanging();
				this._FILENAME = value;
				this.SendPropertyChanged("FILENAME");
				this.OnFILENAMEChanged();
			}
		}
	}
	
	[Association(Name="RECORDING_USER", Storage="_USERS", ThisKey="USER_ID", OtherKey="USER_ID", IsForeignKey=true, DeleteOnNull=true)]
	public USERS USERS
	{
		get
		{
			return this._USERS.Entity;
		}
		set
		{
			USERS previousValue = this._USERS.Entity;
			if (((previousValue != value) 
						|| (this._USERS.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._USERS.Entity = null;
					previousValue.RECORDING.Remove(this);
				}
				this._USERS.Entity = value;
				if ((value != null))
				{
					value.RECORDING.Add(this);
					this._USER_ID = value.USER_ID;
				}
				else
				{
					this._USER_ID = default(int);
				}
				this.SendPropertyChanged("USERS");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table()]
public partial class USERS : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _USER_ID;
	
	private string _NAME;
	
	private string _ADDRESS_1;
	
	private string _ADDRESS_2;
	
	private string _CITY;
	
	private string _POST_REGION;
	
	private string _POST_CODE;
	
	private System.Nullable<int> _AGE;
	
	private string _EMAIL;
	
	private System.DateTime _VISIT_TIMESTAMP;
	
	private string _ACCEPTS_AGREEMENT;
	
	private EntitySet<RECORDING> _RECORDING;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUSER_IDChanging(int value);
    partial void OnUSER_IDChanged();
    partial void OnNAMEChanging(string value);
    partial void OnNAMEChanged();
    partial void OnADDRESS_1Changing(string value);
    partial void OnADDRESS_1Changed();
    partial void OnADDRESS_2Changing(string value);
    partial void OnADDRESS_2Changed();
    partial void OnCITYChanging(string value);
    partial void OnCITYChanged();
    partial void OnPOST_REGIONChanging(string value);
    partial void OnPOST_REGIONChanged();
    partial void OnPOST_CODEChanging(string value);
    partial void OnPOST_CODEChanged();
    partial void OnAGEChanging(System.Nullable<int> value);
    partial void OnAGEChanged();
    partial void OnEMAILChanging(string value);
    partial void OnEMAILChanged();
    partial void OnVISIT_TIMESTAMPChanging(System.DateTime value);
    partial void OnVISIT_TIMESTAMPChanged();
    partial void OnACCEPTS_AGREEMENTChanging(string value);
    partial void OnACCEPTS_AGREEMENTChanged();
    #endregion
	
	public USERS()
	{
		this._RECORDING = new EntitySet<RECORDING>(new Action<RECORDING>(this.attach_RECORDING), new Action<RECORDING>(this.detach_RECORDING));
		OnCreated();
	}
	
	[Column(Storage="_USER_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int USER_ID
	{
		get
		{
			return this._USER_ID;
		}
		set
		{
			if ((this._USER_ID != value))
			{
				this.OnUSER_IDChanging(value);
				this.SendPropertyChanging();
				this._USER_ID = value;
				this.SendPropertyChanged("USER_ID");
				this.OnUSER_IDChanged();
			}
		}
	}
	
	[Column(Storage="_NAME", DbType="NVarChar(50)")]
	public string NAME
	{
		get
		{
			return this._NAME;
		}
		set
		{
			if ((this._NAME != value))
			{
				this.OnNAMEChanging(value);
				this.SendPropertyChanging();
				this._NAME = value;
				this.SendPropertyChanged("NAME");
				this.OnNAMEChanged();
			}
		}
	}
	
	[Column(Storage="_ADDRESS_1", DbType="NVarChar(100)")]
	public string ADDRESS_1
	{
		get
		{
			return this._ADDRESS_1;
		}
		set
		{
			if ((this._ADDRESS_1 != value))
			{
				this.OnADDRESS_1Changing(value);
				this.SendPropertyChanging();
				this._ADDRESS_1 = value;
				this.SendPropertyChanged("ADDRESS_1");
				this.OnADDRESS_1Changed();
			}
		}
	}
	
	[Column(Storage="_ADDRESS_2", DbType="NVarChar(100)")]
	public string ADDRESS_2
	{
		get
		{
			return this._ADDRESS_2;
		}
		set
		{
			if ((this._ADDRESS_2 != value))
			{
				this.OnADDRESS_2Changing(value);
				this.SendPropertyChanging();
				this._ADDRESS_2 = value;
				this.SendPropertyChanged("ADDRESS_2");
				this.OnADDRESS_2Changed();
			}
		}
	}
	
	[Column(Storage="_CITY", DbType="NVarChar(50)")]
	public string CITY
	{
		get
		{
			return this._CITY;
		}
		set
		{
			if ((this._CITY != value))
			{
				this.OnCITYChanging(value);
				this.SendPropertyChanging();
				this._CITY = value;
				this.SendPropertyChanged("CITY");
				this.OnCITYChanged();
			}
		}
	}
	
	[Column(Storage="_POST_REGION", DbType="NVarChar(50)")]
	public string POST_REGION
	{
		get
		{
			return this._POST_REGION;
		}
		set
		{
			if ((this._POST_REGION != value))
			{
				this.OnPOST_REGIONChanging(value);
				this.SendPropertyChanging();
				this._POST_REGION = value;
				this.SendPropertyChanged("POST_REGION");
				this.OnPOST_REGIONChanged();
			}
		}
	}
	
	[Column(Storage="_POST_CODE", DbType="NVarChar(50)")]
	public string POST_CODE
	{
		get
		{
			return this._POST_CODE;
		}
		set
		{
			if ((this._POST_CODE != value))
			{
				this.OnPOST_CODEChanging(value);
				this.SendPropertyChanging();
				this._POST_CODE = value;
				this.SendPropertyChanged("POST_CODE");
				this.OnPOST_CODEChanged();
			}
		}
	}
	
	[Column(Storage="_AGE", DbType="Int")]
	public System.Nullable<int> AGE
	{
		get
		{
			return this._AGE;
		}
		set
		{
			if ((this._AGE != value))
			{
				this.OnAGEChanging(value);
				this.SendPropertyChanging();
				this._AGE = value;
				this.SendPropertyChanged("AGE");
				this.OnAGEChanged();
			}
		}
	}
	
	[Column(Storage="_EMAIL", DbType="NVarChar(100)")]
	public string EMAIL
	{
		get
		{
			return this._EMAIL;
		}
		set
		{
			if ((this._EMAIL != value))
			{
				this.OnEMAILChanging(value);
				this.SendPropertyChanging();
				this._EMAIL = value;
				this.SendPropertyChanged("EMAIL");
				this.OnEMAILChanged();
			}
		}
	}
	
	[Column(Storage="_VISIT_TIMESTAMP", DbType="DateTime NOT NULL")]
	public System.DateTime VISIT_TIMESTAMP
	{
		get
		{
			return this._VISIT_TIMESTAMP;
		}
		set
		{
			if ((this._VISIT_TIMESTAMP != value))
			{
				this.OnVISIT_TIMESTAMPChanging(value);
				this.SendPropertyChanging();
				this._VISIT_TIMESTAMP = value;
				this.SendPropertyChanged("VISIT_TIMESTAMP");
				this.OnVISIT_TIMESTAMPChanged();
			}
		}
	}
	
	[Column(Storage="_ACCEPTS_AGREEMENT", DbType="NChar(1) NOT NULL", CanBeNull=false)]
	public string ACCEPTS_AGREEMENT
	{
		get
		{
			return this._ACCEPTS_AGREEMENT;
		}
		set
		{
			if ((this._ACCEPTS_AGREEMENT != value))
			{
				this.OnACCEPTS_AGREEMENTChanging(value);
				this.SendPropertyChanging();
				this._ACCEPTS_AGREEMENT = value;
				this.SendPropertyChanged("ACCEPTS_AGREEMENT");
				this.OnACCEPTS_AGREEMENTChanged();
			}
		}
	}
	
	[Association(Name="RECORDING_USER", Storage="_RECORDING", ThisKey="USER_ID", OtherKey="USER_ID", DeleteRule="CASCADE")]
	public EntitySet<RECORDING> RECORDING
	{
		get
		{
			return this._RECORDING;
		}
		set
		{
			this._RECORDING.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_RECORDING(RECORDING entity)
	{
		this.SendPropertyChanging();
		entity.USERS = this;
	}
	
	private void detach_RECORDING(RECORDING entity)
	{
		this.SendPropertyChanging();
		entity.USERS = null;
	}
}
#pragma warning restore 1591
